image: "golang:latest"

stages:
  - build
  - package
  - release
  - docker_release

snapshot build:
  stage: build
  image: 
    name: goreleaser/goreleaser:v0.174.1
    entrypoint: [""]
  except:
    - tags # no version tags
  script:
    - goreleaser release --snapshot --skip-publish
    # - make test
  artifacts:
    paths:
      - dist

release build:
  stage: build
  image: 
    name: goreleaser/goreleaser:v0.174.1
    entrypoint: [""]
  only:
    - /^v\d+\.\d+\.\d+-?.*$/
  script:
    - goreleaser release --skip-publish
  artifacts:
    paths:
      - dist

gcs release:
  stage: release
  image: google/cloud-sdk:slim
  variables:
    GIT_STRATEGY: none
  only:
    - /^v\d+\.\d+\.\d+-?.*$/
  script: |
    # auth
    gcloud config set project minepkg-io
    echo $GCP_DEV_SERVICEACCOUNT > ./gcp-secret.json
    gcloud auth activate-service-account --key-file gcp-secret.json
    # upload binaries to GCS
    VERSION=`echo $CI_COMMIT_REF_NAME | cut -c 2-`
    gsutil -m cp dist/minepkg_linux_amd64/minepkg gs://minepkg-client/$VERSION/minepkg-linux-amd64
    gsutil -m cp dist/minepkg_darwin_amd64/minepkg gs://minepkg-client/$VERSION/minepkg-macos-amd64
    gsutil -m cp dist/minepkg_windows_amd64/minepkg.exe gs://minepkg-client/$VERSION/minepkg-windows-amd64.exe
    # copy binaries to static 'latest' directory
    gsutil -m cp gs://minepkg-client/$VERSION/* gs://minepkg-client/latest
    # generate and upload latest version manifest
    echo -e '{
      "version": "'$VERSION'",
      "channel": "stable",
      "binaries": {
        "win": "https://get.minepkg.io/'$VERSION'/minepkg-windows-amd64.exe",
        "macos": "https://get.minepkg.io/'$VERSION'/minepkg-macos-amd64",
        "linux": "https://get.minepkg.io/'$VERSION'/minepkg-linux-amd64"
      }
    }' > latest-version.json
    gsutil -m cp latest-version.json gs://minepkg-client

.docker:
  stage: docker_release
  image: docker:20.10.7
  needs: ["gcs release"]
  services:
    - docker:20.10.7-dind
  variables:
    # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # also login to docker hub
    - docker login -u fiws -p $DOCKER_HUB_TOKEN

.docker release variant:
  stage: docker_release
  extends: .docker
  only:
    - /^v\d+\.\d+\.\d+-?.*$/
  script:
  - VERSION=`echo $CI_COMMIT_REF_NAME | cut -c 2-` 
  - cd ./build/docker-$DOCKER_VARIANT
  - docker build --tag $CI_REGISTRY_IMAGE:$VERSION-$DOCKER_VARIANT --tag $CI_REGISTRY_IMAGE:$DOCKER_VARIANT .
  - docker push $CI_REGISTRY_IMAGE:$VERSION-$DOCKER_VARIANT
  - docker push $CI_REGISTRY_IMAGE:$DOCKER_VARIANT
  # docker hub
  - docker tag $CI_REGISTRY_IMAGE:$VERSION-$DOCKER_VARIANT minepkg/minepkg:$VERSION-$DOCKER_VARIANT 
  - docker tag $CI_REGISTRY_IMAGE:$DOCKER_VARIANT minepkg/minepkg:$DOCKER_VARIANT
  - docker push minepkg/minepkg:$VERSION-$DOCKER_VARIANT 
  - docker push minepkg/minepkg:$DOCKER_VARIANT


# default variant release (no suffix) & tags latest
docker-default release:
  stage: docker_release
  extends: .docker
  only:
    - /^v\d+\.\d+\.\d+-?.*$/
  script:
  - VERSION=`echo $CI_COMMIT_REF_NAME | cut -c 2-`
  - cd ./build/docker-default
  - docker build --tag $CI_REGISTRY_IMAGE:$VERSION --tag $CI_REGISTRY_IMAGE:latest .
  - docker push $CI_REGISTRY_IMAGE:$VERSION
  - docker push $CI_REGISTRY_IMAGE:latest
  # docker hub
  - docker tag $CI_REGISTRY_IMAGE:$VERSION minepkg/minepkg:$VERSION
  - docker tag $CI_REGISTRY_IMAGE:latest minepkg/minepkg:latest
  - docker push minepkg/minepkg:$VERSION
  - docker push minepkg/minepkg:latest

# gradle variant release
docker-gradle release:
  stage: docker_release
  extends: .docker release variant
  variables:
    DOCKER_VARIANT: gradle

# slim variant release
docker-slim release:
  stage: docker_release
  extends: .docker release variant
  variables:
    DOCKER_VARIANT: slim

gcs dev release:
  stage: release
  image: google/cloud-sdk:slim
  only:
    - master
  script:
    # auth
    - gcloud config set project minepkg-io
    - echo $GCP_DEV_SERVICEACCOUNT > ./gcp-secret.json
    - gcloud auth activate-service-account --key-file gcp-secret.json
    # upload binary to GCS
    - gsutil -m cp dist/minepkg_linux_amd64/minepkg gs://minepkg-client/minepkg-dev-snapshot
